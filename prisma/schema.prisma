generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// チーム
model Teams {
  id       Int    @id @default(autoincrement())
  name     String @unique @map("name") @db.VarChar(255)

  // child
  players Players[]
  matches Matches[]
  @@map("teams")
}

// 選手
model Players {
  id   Int    @id @default(autoincrement())
  name String @map("name") @db.VarChar(255)

  // parent
  teams Teams @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId Int  @map("team_id")

  // child
  orderMembers OrderMembers[]
  matchStats MatchStats?

  @@map("players")
}

// 試合
model Matches {
  id               Int      @id @default(autoincrement())
  eventedAt        DateTime @default(now()) @map("evented_at")

  title            String @map("title")          @db.VarChar(255) 
  homeTeamName     String @map("home_team_name") @db.VarChar(255)
  opponentTeamName String @map("opponent_team_name")
  setNum           Int    @map("set_num") 

  // parent
  teams  Teams @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId Int   @map("team_id")

  // child
  sets Sets[]
  matchStats MatchStats?
  matchProgress MatchProgress?

  @@map("matches")
}

// セット
model Sets {
  id                Int     @id @default(autoincrement())
  setNumber         Int     @map("set_number")
  homeTeamScore     Int     @default(0) @map("home_team_score")
  opponentTeamScore Int     @default(0) @map("opponent_team_score")
  isWon             Boolean @default(false) @map("is_won")

  // parent
  matches Matches @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId Int   @map("match_id")

  // child
  orderMembers OrderMembers[]

  @@map("sets")
}

// セットごとの選手
model OrderMembers {
  id        Int @id @default(autoincrement())
  rotation  Int @map("rotation")

  // parent
  sets    Sets    @relation(fields: [setId], references: [id], onDelete: Cascade)
  setId   Int     @map("set_id")

  players Players @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int    @map("player_id")

  @@unique([setId, playerId]) // 1つのセットに同じ選手を重複登録できないようにする
  @@map("order_members")
}

// 試合のデータ
model MatchStats {
  id             Int @id @default(autoincrement())

  spikes         Int @map("spikes")
  spikeSuccesses Int @map("spike_successes")
  spikeMistakes  Int @map("spike_mistakes")

  // parent
  players  Players @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int     @unique @map("player_id")
  matches  Matches @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId  Int     @unique @map("match_id")
}

model MatchProgress {
  id                Int @id @default(autoincrement())
  setNumber         Int @map("set_number")
  homeTeamScore     Int @map("home_team_score")
  opponentTeamScore Int @map("opponent_team_score")

  // parent
  matches  Matches @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId  Int     @unique @map("match_id")
}